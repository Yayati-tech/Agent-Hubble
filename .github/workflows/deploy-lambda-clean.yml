name: Deploy Security Hub Lambda (Clean)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'scripts/deployment/lambda/enhanced-auto-remediation-lambda.py'
      - 'config/requirements.txt'
      - '.github/workflows/deploy-lambda-clean.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      architecture:
        description: 'Lambda architecture'
        required: true
        default: 'arm64'
        type: choice
        options:
          - arm64

env:
  AWS_REGION: us-west-2
  FUNCTION_NAME: enhanced-auto-remediation-lambda
  ROLE_NAME: SecurityHubAutoRemediationRole
  SNS_TOPIC_NAME: SecurityHubAutoRemediationAlerts
  BACKUP_ACCOUNT_ID: "002616177731"
  MANAGEMENT_ACCOUNT_ID: "013983952777"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create deployment package
      run: |
        echo "📦 Creating deployment package..."
        
        # Create deployment directory
        mkdir -p deployment
        
        # Copy Lambda function
        cp scripts/deployment/lambda/enhanced-auto-remediation-lambda.py deployment/
        
        # Create requirements.txt
        cat > deployment/requirements.txt << EOF
        boto3>=1.26.0
        botocore>=1.29.0
        requests>=2.28.0
        PyJWT>=2.8.0
        cryptography>=42.0.2
        EOF
        
        # Install dependencies
        cd deployment
        pip install -r requirements.txt -t .
        cd ..
        
        # Create ZIP package
        cd deployment
        zip -r ../lambda-deployment-package.zip .
        cd ..
        
        echo "✅ Deployment package created"

    - name: Setup IAM role
      run: |
        echo "🔐 Setting up IAM role..."
        
        # Check if role exists
        if ! aws iam get-role --role-name ${{ env.ROLE_NAME }} &> /dev/null; then
          echo "Creating IAM role: ${{ env.ROLE_NAME }}"
          
          # Create trust policy
          cat > trust-policy.json << EOF
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }
        EOF
          
          # Create role
          aws iam create-role \
            --role-name ${{ env.ROLE_NAME }} \
            --assume-role-policy-document file://trust-policy.json \
            --description "Role for Security Hub Auto-Remediation Lambda"
          
          # Attach basic execution policy
          aws iam attach-role-policy \
            --role-name ${{ env.ROLE_NAME }} \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          
          # Create custom policy
          cat > lambda-policy.json << EOF
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "securityhub:*",
                        "iam:*",
                        "s3:*",
                        "ec2:*",
                        "rds:*",
                        "lambda:*",
                        "kms:*",
                        "cloudwatch:*",
                        "cloudtrail:*",
                        "config:*",
                        "guardduty:*",
                        "inspector:*",
                        "ssm:*",
                        "macie2:*",
                        "wafv2:*",
                        "shield:*",
                        "acm:*",
                        "secretsmanager:*",
                        "cloudformation:*",
                        "apigateway:*",
                        "elasticache:*",
                        "dynamodb:*",
                        "eks:*",
                        "ecr:*",
                        "ecs:*",
                        "redshift:*",
                        "sagemaker:*",
                        "glue:*",
                        "sns:*",
                        "sts:*",
                        "organizations:*"
                    ],
                    "Resource": "*"
                }
            ]
        }
        EOF
          
          # Attach custom policy
          aws iam put-role-policy \
            --role-name ${{ env.ROLE_NAME }} \
            --policy-name SecurityHubAutoRemediationPolicy \
            --policy-document file://lambda-policy.json
          
          echo "✅ IAM role created"
        else
          echo "✅ IAM role already exists"
        fi

    - name: Setup SNS topic
      run: |
        echo "📢 Setting up SNS topic..."
        
        # Get account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
        TOPIC_ARN="arn:aws:sns:${{ env.AWS_REGION }}:$ACCOUNT_ID:${{ env.SNS_TOPIC_NAME }}"
        
        # Check if topic exists
        if ! aws sns get-topic-attributes --topic-arn "$TOPIC_ARN" &> /dev/null; then
          echo "Creating SNS topic: ${{ env.SNS_TOPIC_NAME }}"
          aws sns create-topic --name ${{ env.SNS_TOPIC_NAME }}
          echo "✅ SNS topic created"
        else
          echo "✅ SNS topic already exists"
        fi

    - name: Create environment variables
      run: |
        echo "🔧 Creating environment variables..."
        
        cat > env-vars.json << EOF
        {
            "BACKUP_ACCOUNT_ID": "${{ env.BACKUP_ACCOUNT_ID }}",
            "MANAGEMENT_ACCOUNT_ID": "${{ env.MANAGEMENT_ACCOUNT_ID }}",
            "SNS_TOPIC_NAME": "${{ env.SNS_TOPIC_NAME }}"
        }
        EOF
        
        echo "✅ Environment variables created"

    - name: Deploy Lambda function
      run: |
        echo "🚀 Deploying Lambda function..."
        
        # Get role ARN
        ROLE_ARN=$(aws iam get-role --role-name ${{ env.ROLE_NAME }} --query 'Role.Arn' --output text)
        
        # Check if function exists
        if aws lambda get-function --function-name ${{ env.FUNCTION_NAME }} &> /dev/null; then
          echo "Updating existing Lambda function..."
          
          # Update function code
          aws lambda update-function-code \
            --function-name ${{ env.FUNCTION_NAME }} \
            --zip-file fileb://lambda-deployment-package.zip
          
          # Update function configuration
          aws lambda update-function-configuration \
            --function-name ${{ env.FUNCTION_NAME }} \
            --runtime python3.9 \
            --handler enhanced-auto-remediation-lambda.lambda_handler \
            --timeout 900 \
            --memory-size 1024 \
            --environment file://env-vars.json
          
          echo "✅ Lambda function updated"
        else
          echo "Creating new Lambda function..."
          
          # Create function
          aws lambda create-function \
            --function-name ${{ env.FUNCTION_NAME }} \
            --runtime python3.9 \
            --role $ROLE_ARN \
            --handler enhanced-auto-remediation-lambda.lambda_handler \
            --zip-file fileb://lambda-deployment-package.zip \
            --timeout 900 \
            --memory-size 1024 \
            --environment file://env-vars.json
          
          echo "✅ Lambda function created"
        fi

    - name: Test Lambda function
      run: |
        echo "🧪 Testing Lambda function..."
        
        # Create test event
        cat > test-event.json << EOF
        {
            "version": "0",
            "id": "test-event",
            "detail-type": "Security Hub Findings - Imported",
            "source": "aws.securityhub",
            "account": "$(aws sts get-caller-identity --query 'Account' --output text)",
            "time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "region": "${{ env.AWS_REGION }}",
            "detail": {
                "findings": []
            }
        }
        EOF
        
        # Invoke function
        aws lambda invoke \
          --function-name ${{ env.FUNCTION_NAME }} \
          --payload file://test-event.json \
          response.json
        
        echo "✅ Lambda function test completed"

    - name: Cleanup
      run: |
        echo "🧹 Cleaning up temporary files..."
        rm -f trust-policy.json lambda-policy.json env-vars.json test-event.json response.json
        rm -rf deployment
        echo "✅ Cleanup completed"

    - name: Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📋 Summary:"
        echo "  - Function: ${{ env.FUNCTION_NAME }}"
        echo "  - Region: ${{ env.AWS_REGION }}"
        echo "  - Runtime: Python 3.9"
        echo "  - Architecture: ${{ github.event.inputs.architecture || 'arm64' }}"
        echo "  - Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo ""
        echo "📋 Next steps:"
        echo "  1. Configure Security Hub to trigger this Lambda function"
        echo "  2. Test the function with sample Security Hub findings"
        echo "  3. Monitor CloudWatch logs for function execution"
        echo "  4. Set up SNS notifications for remediation events" 